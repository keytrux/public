<resources>
    <string name="app_name">PyGuide</string>

    <string name="download_python_text">
        \tДля установки компилятора языка программирования скачайте инсталятор соответствующий ващей операционной ссистеме с сайта разработчика Python.org
        \n\tТак же установить Python можно испльлзуя консольные утилиты
        \n\n
        Windows
        \n
        \tchoco install python3
        \n\n
        Linux: Ubuntu
        \n
        \tsudo apt install python3
        \n\n
        Linux: Fedora
        \n
        \tsudo dnf install python3

    </string>


    <string name="syntax_text">
        • Конец строки является концом инструкции (точка с запятой не требуется).
        \n\n• Вложенные инструкции объединяются в блоки по величине отступов. Отступ может
        быть любым, главное, чтобы в пределах одного вложенного блока отступ был одинаков. И про читаемость кода не забывайте. Отступ в 1 пробел, к примеру, не лучшее
        решение. Используйте 4 пробела (или знак табуляции, на худой конец).
        \n\n• Вложенные инструкции в Python записываются в соответствии с одним и тем же
        шаблоном, когда основная инструкция завершается двоеточием, вслед за которым
        располагается вложенный блок кода, обычно с отступом под строкой основной инструкции.

    </string>


    <string name="integer_text">
        \tЧисла
        \n\tЧисла - Это не изменяемый тип данных. Числа в Python бывают трёх типов: целые, с плавающей точкой и комплексные. * Примером целого числа может служить 2. * Примерами чисел с плавающей точкой (или «плавающих» для краткости) могут быть 3.23 и 52.3E-4. Обозначение E показывает степени числа 10. В данном случае 52.3E-4 означает 52.3 · 10−4. * Примерыкомплексныхчисел:(-5+4j)и(2.3-4.6j)
    </string>

    <string name="string_text">
        \tСтроки
        \n\tСтроки - это неизменяемая упорядоченная последовательность символов, заключенная в кавычки. Строки применяются для записи текстовой информации (кажем, вашего имени) и произвольных совокупностей байтов (наподобие содержимого файла изображения). Они являются первым примером того, что в Python называется последовательностью — позиционно упорядоченной коллекцией других объектов. Для содержащихся элементов последовательности поддерживают порядок слева направо: элементы сохраняются и извлекаются по своим относительным позициям. Строго говоря, строки представляют собой последовательности односимвольных строк.
    </string>

    <string name="lists_text">
        \tСписки
        \n\tСписки – это изменяемые упорядоченные последовательности произвольных объектов. Списки создаются посредством заключения элементов списка в квадратные скобки.
        \n\tЭлементы списка индексируются целыми числами, первый элемент списка имеет индекс, равный нулю. Для доступа к отдельным элементам списка используется оператор индексирования.
    </string>

    <string name="dictionaries_text">
        \tСловари
        \n\tСловари Python — нечто совершенно иное; они вообще не являются последовательностями и взамен известны как отображения. Отображения также представляют собой коллекции других объектов, но они хранят объекты по ключам, а не по относительным позициям. В действительности отображения не поддерживают какой-либо надежный порядок слева направо; они просто отображают ключи на связанные значения. Словари — единственный тип отображения в наборе основных объектов Python — являются изменяемыми,’ как и списки, их можно модифицировать на месте и они способны увеличиваться и уменьшаться по требованию.
    </string>

    <string name="tuples_text">
        \tКортежи
        \n\tОбъект кортежа примерно похож на список, который нельзя изменять — кортежи являются последовательностями подобно спискам, но они неизменяемые подобно строка ми. Функционально они используются для представления фиксированных коллекций элементов: скажем, компонентов специфической даты в календаре. Синтаксически они записываются в круглых, а не квадратных скобках и поддерживают произвольные типы, произвольное вложение и обычные операции над последовательностями.
    </string>


    <string name="plenty_text">
        \tМножество
        \n\tМножество - это изменяемый неупорядоченный тип данных. В множестве всегда содержатся только уникальные элементы.
        \n\tМножество в Python - это последовательность элементов, которые разделены между собой запятой и заключены в фигурные скобки.
    </string>

    <string name="bool_text">
        \tБулевы значения
        \n\tБулевы значения в Python это две константы True и False.
        \n
        \tВ Python истинными и ложными значениями считаются не только True и False.
        \n\n
        \tистинное значение:
        \n
        • любое ненулевое число
        \n
        • любая непустая строка
        \n
        • любой непустой объект
        \n\n
        \tложное значение:
        \n
        • 0
        \n
        • None
        \n
        • пустая строка
        \n
        • пустой объект
        \n\n
        \tОстальные истинные и ложные значения, как правило, логически следуют из условия.
    </string>

    <string name="variables">
        \tПеременная в языке программирования это название для зарезервированного места в памяти компьютера, предназначенное для хранения значений. Это означает, что когда вы создаете переменную, вы на самом деле резервируете определенное место в памяти компьютера. Основываясь на типе данных переменной, интерпретатор выделяет необходимое количество памяти и решает, что может находится в зарезервированной области памяти. Для понимания, можете думать о переменной как о коробке, в которую можно положить любую вещь, но только определенного размера. Размер в данном примере будет типом переменной. Это не совсем верное определение, но оно дает общее представление о картине в целом.
\n\n
        \tПрисвоение значения переменной:
\n\n
        \tВ Python вам не нужно объявлять тип переменной вручную (как, например в С++). Объявление происходит автоматически (это называется динамическая типизация), когда вы присваиваете значение переменной. Знак равенства ( = ) используется для присвоения значения переменной. Операнд по левую сторону от знака равно ( = ) это имя переменной, операнд по правую сторону - значение присвоенное этой переменной.
    </string>

    <string name="for_text">
        \tЦикл for используется в двух случаях:
\n\n
        • Если нужно выполнить одну операцию (или набор из нескольких различных действий) определенное количество раз.
        \n
        • Если необходимо провести итерацию (перебор) элементов коллекции – списка, строки, словаря, кортежа, множества – одновременно выполняя какие-либо операции с этими элементами.
        \n\n
        \tВ любом из этих случаев цикл for может быть:

        \n\n
        • простым – состоящим из одного for-цикла;
        • вложенным – состоящим из двух и более for-циклов.
    </string>

    <string name="while_text">
        \tЦикл while ("пока") позволяет выполнить одну и ту же последовательность действий, пока проверяемое условие истинно. Условие записывается после ключевого слова while и проверяется до выполнения тела цикла.
\n\n
        \tЦикл while используется, когда невозможно определить точное количество повторений цикла.
        \n\n
        \tЦикл while может быть бесконечным.
        \n\n
        \tВыполнение цикла можно прерывать с помощью оператора break.
        \n\n
        \tОператор continue начинает повторение цикла заново.

    </string>

    <string name="if_text">
        \tОператор if используется для проверки определенного условия, и если условие истинно, он выполняет блок кода, известный как блок if. Условием оператора if может быть любое допустимое логическое выражение, которое может быть оценено как истинное или ложное.
        \n\n
        \tОператор ветвления if  позволяет выполнить определенный набор инструкций в зависимости от некоторого условия.
        \n\n
        \tПосле оператора if  записывается выражение. Если это выражение истинно, то выполняются инструкции, определяемые данным оператором. Выражение является истинным, если его результатом является число не равное нулю, непустой объект, либо логическое True. После выражения нужно поставить двоеточие “:”.
        \n\n
        \tВАЖНО: блок кода, который необходимо выполнить, в случае истинности выражения, отделяется четырьмя пробелами слева!
    </string>

    <string name="if_else_text">

        \tБывают случаи, когда необходимо предусмотреть альтернативный вариант выполнения программы. Т.е. при истинном условии нужно выполнить один набор инструкций, при ложном – другой. Для этого используется конструкция if – else.
        \n\n
        \tОператор if-else предоставляет блок else в сочетании с оператором if, который выполняется в случае ложного условия.
        \n\n
        \tЕсли условие истинно, то выполняется блок if. В противном случае выполняется блок else.

    </string>

    <string name="if_elif_else_text">
        \tОператор elif позволяет нам проверять несколько условий и выполнять конкретный блок операторов в зависимости от истинного условия среди них. В нашей программе может быть любое количество операторов elif в зависимости от наших потребностей. Однако использовать elif необязательно.

    </string>

    <string name="function_text">
        \tВстроенные функции являются одними из важнейших элементов языка Python. Они не только часто используются, но и отвечают за те вещи, которых не добиться другими способами. В Python десятки встроенных функций, и у каждой из них есть уникальные возможности.
    </string>

    <string name="abs">
        \tФункция abs() в Python возвращает абсолютное значение числа. Если это комплексное число, то абсолютным значением будет величина целой и мнимой частей.
    </string>

    <string name="chr">
       \tФункция chr() возвращает строку, представляющую символ Unicode для переданного числа. Она является противоположностью ord(), которая принимает символ и возвращает его числовой код.
    </string>

    <string name="callable">
        \tВызываемый объект — это объект, который можно вызвать. Функция callable() сообщает, является ли объект вызываемым. Если да, то возвращает True, а в противном случае — False.
    </string>

    <string name="complex">
        \tКомплексное число — это число, представленное в форме a + bi. Оно принимает целые числа или строки и возвращает соответствующее комплексное число. Если передать неподходящее значение, то вернется ошибка ValueError.
    </string>

    <string name="dict">
        \tЭта функция используется в Python для создания словарей. Это же можно делать и вручную, но функция предоставляет большую гибкость и дополнительные возможности. Например, ей в качестве параметра можно передать несколько словарей, объединив их в один большой.
    </string>

    <string name="dir">
        \tФункция dir() получает список вех атрибутов и методов объекта. Если объект не передать, то функция вернет все имена модулей в локальном пространстве имен.
    </string>

    <string name="enumerate">
        \tВ качестве параметра эта функция принимает последовательность. После этого она перебирает каждый элемент и возвращает его вместе со счетчиком в виде перечисляемого объекта. Основная особенность таких объектов — возможность размещать их в цикле для перебора.
    </string>

    <string name="eval">
        \teval() обрабатывает переданное в нее выражение и исполняет его как выражение Python. После этого возвращается значение. Чаще всего эта функция используется для выполнения математических функций.
    </string>

    <string name="filter">
        \tКак можно догадаться по названию, эта функция используется для перебора итерируемых объектов и последовательностей, таких как списки, кортежи и словари. Но перед ее использованием нужно также иметь подходящую функцию, которая бы проверяла каждый элемент на валидность. Если элемент подходит, он будет возвращаться в вывод.
    </string>

    <string name="float_text">
        \tЭта встроенная функция конвертирует число или строку в число с плавающей точкой и возвращает результат. Если из-за некорректного ввода конвертация не проходит, возвращаются ValueError или TypeError.
    </string>

    <string name="hash">
        \tУ большинства объектов в Python есть хэш-номер. Функция hash() возвращает значение хэша переданного объекта. Объекты с __hash__() — это те, у которых есть соответствующее значение.
    </string>

    <string name="help">
        \tФункция help() предоставляет простой способ получения доступа к документации Python без интернета для любой функции, ключевого слова или модуля.
    </string>

    <string name="input">
        \tФункция input() — это быстрый и удобный способ получить данные от пользователя. Вызов этой функции предоставляет пользователю возможность ввести на экране текст. Затем он конвертируется в строку и возвращается в программу.
    </string>

    <string name="int_text">
        \tЭта функция возвращает целое число из объекта, переданного в параметра. Она может конвертировать числа с разным основанием (шестнадцатеричные, двоичные и так далее) в целые.
    </string>

    <string name="iter">
        \tЭта функция принимает объект и возвращает итерируемый объект. Сам по себе он бесполезен, но оказывается крайне эффективным при использовании в циклах for и while. Благодаря этому объект можно перебирать по одному свойству за раз.
    </string>

    <string name="max">
        \tЭта функция используется для нахождения «максимального» значения в последовательности, итерируемом объекте и так далее. В параметрах можно менять способ вычисления максимального значения.
    </string>

    <string name="min">
        \tЭта функция используется для нахождения «минимального» значения в последовательности, итерируемом объекте и так далее. В параметрах можно менять способ вычисления минимального значения.
    </string>

    <string name="len">
        \tЭта функция используется для вычисления длины последовательности или итерируемого объекта
    </string>

    <string name="list">
        \tВ качестве параметра функция list() принимает итерируемый объект и возвращает список. Она обеспечивает большие гибкость и скорость при создании списков по сравнению с обычным способом.
    </string>

    <string name="map">
        \tИспользуется для применения определенной функции к итерируемому объекту. Она возвращает результат в виде итерируемого объекта (списки, кортежи, множества). Можно передать и несколько объектов, но в таком случае нужно будет и соответствующее количество функций.
    </string>

    <string name="next">
        \tИспользуется для итерируемых объектов. Умеет получать следующий (next) элемент в последовательности. Добравшись до конца, выводит значение по умолчанию.
    </string>

    <string name="ord">
        \tФункция ord() принимает один символ или строку длиной в один символ и возвращает соответствующее значение Unicode. Например, ord("a") вернет 97, а 97 — a.
    </string>

    <string name="reversed">
        \tЭта функция предоставляет простой и быстрый способ развернуть порядок элементов в последовательности. В качестве параметра она принимает валидную последовательность, например список, а возвращает итерируемый объект.
    </string>

    <string name="range">
        \tИспользуется для создания последовательности чисел с заданными значениями от и до, а также интервалом. Такая последовательность часто используется в циклах, особенно в цикле for.
    </string>

    <string name="reduce">
        \tВыполняет переданную в качестве аргумента функцию для каждого элемента последовательности. Она является частью functools, поэтому перед ее использованием соответствующий модуль нужно импортировать.
    </string>

    <string name="sorted">
        \tИспользуется для сортировки последовательностей значений разных типов. Например, может отсортировать список строк в алфавитном порядке или список числовых значений по возрастанию или убыванию.
    </string>

    <string name="str">
        \tИспользуется для создания строковых представлений объектов, но не меняет сам объект, а возвращает новый. У нее есть встроенные механизмы кодировки и обработки ошибок, которые помогают при конвертации.
    </string>

    <string name="set">
        \tФункция set() используется для создания наборов данных, которые передаются в качестве параметра. Обычно это последовательность, например строка или список, которая затем преобразуется в множество уникальных значений.
    </string>

    <string name="sum">
        \tВычисление суммы — стандартная задача во многих приложениях. И для этого в Python есть встроенная функция. Она автоматически суммирует все элементы и возвращает сумму.
    </string>

    <string name="tuple">
        \tПринимает один аргумент (итерируемый объект), которым может быть, например, список или словарь, последовательность или итератор и возвращает его в форме кортежа. Если не передать объект, то вернется пустой кортеж.
    </string>

    <string name="type">
        \tФункция type применяется в двух сценариях. Если передать один параметр, то она вернет тип этого объекта. Если же передать три параметра, то можно создать объект type.
    </string>




































</resources>